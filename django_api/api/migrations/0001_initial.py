# Generated by Django 4.2 on 2024-09-09 09:54

import api.validators
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Realty category name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='City name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, unique=True, verbose_name='Currency full name')),
                ('code', models.CharField(max_length=3, unique=True, verbose_name='ISO currency code')),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.PositiveBigIntegerField(help_text='Telegram id', unique=True, verbose_name='Telegram id')),
                ('username', models.CharField(help_text='Telegram username', max_length=128, unique=True, verbose_name='Username')),
            ],
            options={
                'ordering': ('username',),
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name or language')),
                ('code', models.CharField(max_length=3, verbose_name='Language code')),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='SearchParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_price', models.PositiveIntegerField(verbose_name='Min price in euro')),
                ('max_price', models.PositiveIntegerField(verbose_name='Max price in euro')),
                ('min_area', models.PositiveIntegerField(verbose_name='Min area in m2')),
                ('max_area', models.PositiveIntegerField(verbose_name='Max area in m2')),
                ('rooms_number', models.FloatField(verbose_name='Number of rooms')),
                ('pub_date_time', models.DateTimeField(auto_now=True, help_text='Date and time of the last search query', verbose_name='Date and time')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.category')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.city')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.customer')),
            ],
            options={
                'ordering': ('-pub_date_time', 'city__name', 'category__name'),
            },
        ),
        migrations.CreateModel(
            name='Realty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('additional_info', models.CharField(blank=True, help_text='Additional information about address', max_length=500, null=True, verbose_name='Additional address')),
                ('title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('price', models.PositiveIntegerField(blank=True, null=True, verbose_name='Price')),
                ('area', models.PositiveIntegerField(blank=True, null=True, verbose_name='Area')),
                ('rooms_number', models.FloatField(blank=True, null=True, verbose_name='Number of rooms')),
                ('image_url', models.URLField(blank=True, unique=True, verbose_name='Link to the main image')),
                ('url', models.URLField(unique=True, verbose_name='Link to the real estate')),
                ('pub_date_time', models.DateTimeField(auto_now_add=True, verbose_name='Ad download date and time')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.category')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.city')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.currency')),
            ],
            options={
                'ordering': ('-pub_date_time',),
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='language',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.language'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=128, unique=True, validators=[api.validators.validate_found_special_symbols, api.validators.validate_not_djoser_endpoints], verbose_name='Username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='realty',
            constraint=models.UniqueConstraint(fields=('city', 'category', 'url'), name='unique_city_category_url_realty'),
        ),
    ]
